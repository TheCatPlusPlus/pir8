//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace PIR8.ISA.Assembly.Gen {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class GrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, LINE_COMMENT_1=2, LINE_COMMENT_2=3, NUMBER=4, LPAREN=5, RPAREN=6, 
		LBRACKET=7, RBRACKET=8, ARITH_RSHIFT=9, RSHIFT=10, LSHIFT=11, AND=12, 
		OR=13, MULTIPLY=14, DIVIDE=15, MODULO=16, ADD=17, MINUS=18, XOR=19, NOT=20, 
		COLON=21, COMMA=22, ASSIGN=23, KW_BYTE=24, KW_WORD=25, KW_DWORD=26, KW_QWORD=27, 
		REGISTER=28, LABEL=29, WHITESPACE=30;
	public const int
		RULE_file = 0, RULE_mnemonic = 1, RULE_constName = 2, RULE_entry = 3, 
		RULE_operands = 4, RULE_type = 5, RULE_operand = 6, RULE_datum = 7, RULE_expr = 8;
	public static readonly string[] ruleNames = {
		"file", "mnemonic", "constName", "entry", "operands", "type", "operand", 
		"datum", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'('", "')'", "'['", "']'", "'>>>'", "'>>'", 
		"'<<'", "'&'", "'|'", "'*'", "'/'", "'%'", "'+'", "'-'", "'^'", "'~'", 
		"':'", "','", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "LINE_COMMENT_1", "LINE_COMMENT_2", "NUMBER", "LPAREN", 
		"RPAREN", "LBRACKET", "RBRACKET", "ARITH_RSHIFT", "RSHIFT", "LSHIFT", 
		"AND", "OR", "MULTIPLY", "DIVIDE", "MODULO", "ADD", "MINUS", "XOR", "NOT", 
		"COLON", "COMMA", "ASSIGN", "KW_BYTE", "KW_WORD", "KW_DWORD", "KW_QWORD", 
		"REGISTER", "LABEL", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class FileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GrammarParser.Eof, 0); }
		public EntryContext[] entry() {
			return GetRuleContexts<EntryContext>();
		}
		public EntryContext entry(int i) {
			return GetRuleContext<EntryContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_BYTE) | (1L << KW_WORD) | (1L << KW_DWORD) | (1L << KW_QWORD) | (1L << LABEL))) != 0)) {
				{
				{
				State = 18; entry();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 24; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MnemonicContext : ParserRuleContext {
		public ITerminalNode LABEL() { return GetToken(GrammarParser.LABEL, 0); }
		public MnemonicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mnemonic; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMnemonic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MnemonicContext mnemonic() {
		MnemonicContext _localctx = new MnemonicContext(Context, State);
		EnterRule(_localctx, 2, RULE_mnemonic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; Match(LABEL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstNameContext : ParserRuleContext {
		public ITerminalNode LABEL() { return GetToken(GrammarParser.LABEL, 0); }
		public ConstNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstNameContext constName() {
		ConstNameContext _localctx = new ConstNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_constName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; Match(LABEL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryContext : ParserRuleContext {
		public EntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entry; } }
	 
		public EntryContext() { }
		public virtual void CopyFrom(EntryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstantContext : EntryContext {
		public ConstNameContext constName() {
			return GetRuleContext<ConstNameContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(GrammarParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ConstantContext(EntryContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DataContext : EntryContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public DatumContext[] datum() {
			return GetRuleContexts<DatumContext>();
		}
		public DatumContext datum(int i) {
			return GetRuleContext<DatumContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		public DataContext(EntryContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstructionContext : EntryContext {
		public MnemonicContext mnemonic() {
			return GetRuleContext<MnemonicContext>(0);
		}
		public OperandsContext operands() {
			return GetRuleContext<OperandsContext>(0);
		}
		public InstructionContext(EntryContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LabelContext : EntryContext {
		public ITerminalNode LABEL() { return GetToken(GrammarParser.LABEL, 0); }
		public ITerminalNode COLON() { return GetToken(GrammarParser.COLON, 0); }
		public LabelContext(EntryContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntryContext entry() {
		EntryContext _localctx = new EntryContext(Context, State);
		EnterRule(_localctx, 6, RULE_entry);
		int _la;
		try {
			State = 49;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new LabelContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 30; Match(LABEL);
				State = 31; Match(COLON);
				}
				break;
			case 2:
				_localctx = new InstructionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 32; mnemonic();
				State = 34;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 33; operands();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new DataContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 36; type();
				State = 37; datum();
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 38; Match(COMMA);
					State = 39; datum();
					}
					}
					State = 44;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 4:
				_localctx = new ConstantContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 45; constName();
				State = 46; Match(ASSIGN);
				State = 47; expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandsContext : ParserRuleContext {
		public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		public OperandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operands; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandsContext operands() {
		OperandsContext _localctx = new OperandsContext(Context, State);
		EnterRule(_localctx, 8, RULE_operands);
		try {
			State = 62;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 51; operand();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 52; operand();
				State = 53; Match(COMMA);
				State = 54; operand();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 56; operand();
				State = 57; Match(COMMA);
				State = 58; operand();
				State = 59; Match(COMMA);
				State = 60; operand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode KW_BYTE() { return GetToken(GrammarParser.KW_BYTE, 0); }
		public ITerminalNode KW_WORD() { return GetToken(GrammarParser.KW_WORD, 0); }
		public ITerminalNode KW_DWORD() { return GetToken(GrammarParser.KW_DWORD, 0); }
		public ITerminalNode KW_QWORD() { return GetToken(GrammarParser.KW_QWORD, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_BYTE) | (1L << KW_WORD) | (1L << KW_DWORD) | (1L << KW_QWORD))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
	 
		public OperandContext() { }
		public virtual void CopyFrom(OperandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ImmOpContext : OperandContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ImmOpContext(OperandContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegOpContext : OperandContext {
		public ITerminalNode REGISTER() { return GetToken(GrammarParser.REGISTER, 0); }
		public RegOpContext(OperandContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImmRegOpContext : OperandContext {
		public ITerminalNode LBRACKET() { return GetToken(GrammarParser.LBRACKET, 0); }
		public ITerminalNode REGISTER() { return GetToken(GrammarParser.REGISTER, 0); }
		public ITerminalNode RBRACKET() { return GetToken(GrammarParser.RBRACKET, 0); }
		public ImmRegOpContext(OperandContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmRegOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImmAddrOpContext : OperandContext {
		public ITerminalNode LBRACKET() { return GetToken(GrammarParser.LBRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(GrammarParser.RBRACKET, 0); }
		public ImmAddrOpContext(OperandContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmAddrOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 12, RULE_operand);
		try {
			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new ImmOpContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 66; expr(0);
				}
				break;
			case 2:
				_localctx = new RegOpContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 67; Match(REGISTER);
				}
				break;
			case 3:
				_localctx = new ImmAddrOpContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 68; Match(LBRACKET);
				State = 69; expr(0);
				State = 70; Match(RBRACKET);
				}
				break;
			case 4:
				_localctx = new ImmRegOpContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 72; Match(LBRACKET);
				State = 73; Match(REGISTER);
				State = 74; Match(RBRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatumContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DatumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datum; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatumContext datum() {
		DatumContext _localctx = new DatumContext(Context, State);
		EnterRule(_localctx, 14, RULE_datum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NegateExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(GrammarParser.MINUS, 0); }
		public ITerminalNode NOT() { return GetToken(GrammarParser.NOT, 0); }
		public NegateExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegateExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(GrammarParser.ADD, 0); }
		public ITerminalNode MINUS() { return GetToken(GrammarParser.MINUS, 0); }
		public AddExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantLitContext : ExprContext {
		public ITerminalNode LABEL() { return GetToken(GrammarParser.LABEL, 0); }
		public ConstantLitContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantLit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberLitContext : ExprContext {
		public ITerminalNode NUMBER() { return GetToken(GrammarParser.NUMBER, 0); }
		public NumberLitContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OR() { return GetToken(GrammarParser.OR, 0); }
		public OrExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MULTIPLY() { return GetToken(GrammarParser.MULTIPLY, 0); }
		public ITerminalNode DIVIDE() { return GetToken(GrammarParser.DIVIDE, 0); }
		public ITerminalNode MODULO() { return GetToken(GrammarParser.MODULO, 0); }
		public MultExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode XOR() { return GetToken(GrammarParser.XOR, 0); }
		public XorExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExprContext : ExprContext {
		public ITerminalNode LPAREN() { return GetToken(GrammarParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(GrammarParser.RPAREN, 0); }
		public ParenExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShiftExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode ARITH_RSHIFT() { return GetToken(GrammarParser.ARITH_RSHIFT, 0); }
		public ITerminalNode RSHIFT() { return GetToken(GrammarParser.RSHIFT, 0); }
		public ITerminalNode LSHIFT() { return GetToken(GrammarParser.LSHIFT, 0); }
		public ShiftExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AND() { return GetToken(GrammarParser.AND, 0); }
		public AndExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
			case NOT:
				{
				_localctx = new NegateExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 80;
				_la = TokenStream.LA(1);
				if ( !(_la==MINUS || _la==NOT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 81; expr(10);
				}
				break;
			case LPAREN:
				{
				_localctx = new ParenExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 82; Match(LPAREN);
				State = 83; expr(0);
				State = 84; Match(RPAREN);
				}
				break;
			case NUMBER:
				{
				_localctx = new NumberLitContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 86; Match(NUMBER);
				}
				break;
			case LABEL:
				{
				_localctx = new ConstantLitContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 87; Match(LABEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 110;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 108;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new MultExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 90;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 91;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULTIPLY) | (1L << DIVIDE) | (1L << MODULO))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 92; expr(9);
						}
						break;
					case 2:
						{
						_localctx = new AddExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 93;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 94;
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 95; expr(8);
						}
						break;
					case 3:
						{
						_localctx = new ShiftExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 96;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 97;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ARITH_RSHIFT) | (1L << RSHIFT) | (1L << LSHIFT))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 98; expr(7);
						}
						break;
					case 4:
						{
						_localctx = new AndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 99;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 100; Match(AND);
						State = 101; expr(6);
						}
						break;
					case 5:
						{
						_localctx = new XorExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 102;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 103; Match(XOR);
						State = 104; expr(5);
						}
						break;
					case 6:
						{
						_localctx = new OrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 105;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 106; Match(OR);
						State = 107; expr(4);
						}
						break;
					}
					} 
				}
				State = 112;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ' ', 't', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', 
		'\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\a', '\x2', 
		'\x16', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x19', '\v', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '%', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\a', '\x5', '+', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '.', 
		'\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x34', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x41', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', 'N', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '[', '\n', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\a', '\n', 'o', '\n', '\n', '\f', '\n', '\xE', '\n', 'r', '\v', 
		'\n', '\x3', '\n', '\x2', '\x3', '\x12', '\v', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x2', '\a', '\x3', '\x2', '\x1A', 
		'\x1D', '\x4', '\x2', '\x14', '\x14', '\x16', '\x16', '\x3', '\x2', '\x10', 
		'\x12', '\x3', '\x2', '\x13', '\x14', '\x3', '\x2', '\v', '\r', '\x2', 
		'~', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\x1E', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\n', '@', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x42', '\x3', '\x2', '\x2', '\x2', '\xE', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\x10', 'O', '\x3', '\x2', '\x2', '\x2', '\x12', 'Z', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x16', '\x5', '\b', '\x5', '\x2', '\x15', '\x14', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x17', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x19', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\a', '\x2', '\x2', '\x3', 
		'\x1B', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\a', '\x1F', 
		'\x2', '\x2', '\x1D', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', 
		'\a', '\x1F', '\x2', '\x2', '\x1F', '\a', '\x3', '\x2', '\x2', '\x2', 
		' ', '!', '\a', '\x1F', '\x2', '\x2', '!', '\x34', '\a', '\x17', '\x2', 
		'\x2', '\"', '$', '\x5', '\x4', '\x3', '\x2', '#', '%', '\x5', '\n', '\x6', 
		'\x2', '$', '#', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', '\x2', '\x2', 
		'\x2', '%', '\x34', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x5', '\f', 
		'\a', '\x2', '\'', ',', '\x5', '\x10', '\t', '\x2', '(', ')', '\a', '\x18', 
		'\x2', '\x2', ')', '+', '\x5', '\x10', '\t', '\x2', '*', '(', '\x3', '\x2', 
		'\x2', '\x2', '+', '.', '\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', 
		'\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', '-', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '/', '\x30', 
		'\x5', '\x6', '\x4', '\x2', '\x30', '\x31', '\a', '\x19', '\x2', '\x2', 
		'\x31', '\x32', '\x5', '\x12', '\n', '\x2', '\x32', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x33', ' ', '\x3', '\x2', '\x2', '\x2', '\x33', '\"', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '&', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x34', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x41', '\x5', '\xE', '\b', '\x2', '\x36', '\x37', '\x5', '\xE', 
		'\b', '\x2', '\x37', '\x38', '\a', '\x18', '\x2', '\x2', '\x38', '\x39', 
		'\x5', '\xE', '\b', '\x2', '\x39', '\x41', '\x3', '\x2', '\x2', '\x2', 
		':', ';', '\x5', '\xE', '\b', '\x2', ';', '<', '\a', '\x18', '\x2', '\x2', 
		'<', '=', '\x5', '\xE', '\b', '\x2', '=', '>', '\a', '\x18', '\x2', '\x2', 
		'>', '?', '\x5', '\xE', '\b', '\x2', '?', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x35', '\x3', '\x2', '\x2', '\x2', '@', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '@', ':', '\x3', '\x2', '\x2', '\x2', '\x41', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x43', '\t', '\x2', '\x2', '\x2', '\x43', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x44', 'N', '\x5', '\x12', '\n', '\x2', 
		'\x45', 'N', '\a', '\x1E', '\x2', '\x2', '\x46', 'G', '\a', '\t', '\x2', 
		'\x2', 'G', 'H', '\x5', '\x12', '\n', '\x2', 'H', 'I', '\a', '\n', '\x2', 
		'\x2', 'I', 'N', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', '\t', '\x2', 
		'\x2', 'K', 'L', '\a', '\x1E', '\x2', '\x2', 'L', 'N', '\a', '\n', '\x2', 
		'\x2', 'M', '\x44', '\x3', '\x2', '\x2', '\x2', 'M', '\x45', '\x3', '\x2', 
		'\x2', '\x2', 'M', '\x46', '\x3', '\x2', '\x2', '\x2', 'M', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'N', '\xF', '\x3', '\x2', '\x2', '\x2', 'O', 'P', 
		'\x5', '\x12', '\n', '\x2', 'P', '\x11', '\x3', '\x2', '\x2', '\x2', 'Q', 
		'R', '\b', '\n', '\x1', '\x2', 'R', 'S', '\t', '\x3', '\x2', '\x2', 'S', 
		'[', '\x5', '\x12', '\n', '\f', 'T', 'U', '\a', '\a', '\x2', '\x2', 'U', 
		'V', '\x5', '\x12', '\n', '\x2', 'V', 'W', '\a', '\b', '\x2', '\x2', 'W', 
		'[', '\x3', '\x2', '\x2', '\x2', 'X', '[', '\a', '\x6', '\x2', '\x2', 
		'Y', '[', '\a', '\x1F', '\x2', '\x2', 'Z', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'Z', 'T', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', 
		'Z', 'Y', '\x3', '\x2', '\x2', '\x2', '[', 'p', '\x3', '\x2', '\x2', '\x2', 
		'\\', ']', '\f', '\n', '\x2', '\x2', ']', '^', '\t', '\x4', '\x2', '\x2', 
		'^', 'o', '\x5', '\x12', '\n', '\v', '_', '`', '\f', '\t', '\x2', '\x2', 
		'`', '\x61', '\t', '\x5', '\x2', '\x2', '\x61', 'o', '\x5', '\x12', '\n', 
		'\n', '\x62', '\x63', '\f', '\b', '\x2', '\x2', '\x63', '\x64', '\t', 
		'\x6', '\x2', '\x2', '\x64', 'o', '\x5', '\x12', '\n', '\t', '\x65', '\x66', 
		'\f', '\a', '\x2', '\x2', '\x66', 'g', '\a', '\xE', '\x2', '\x2', 'g', 
		'o', '\x5', '\x12', '\n', '\b', 'h', 'i', '\f', '\x6', '\x2', '\x2', 'i', 
		'j', '\a', '\x15', '\x2', '\x2', 'j', 'o', '\x5', '\x12', '\n', '\a', 
		'k', 'l', '\f', '\x5', '\x2', '\x2', 'l', 'm', '\a', '\xF', '\x2', '\x2', 
		'm', 'o', '\x5', '\x12', '\n', '\x6', 'n', '\\', '\x3', '\x2', '\x2', 
		'\x2', 'n', '_', '\x3', '\x2', '\x2', '\x2', 'n', '\x62', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x65', '\x3', '\x2', '\x2', '\x2', 'n', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'k', '\x3', '\x2', '\x2', '\x2', 'o', 'r', '\x3', 
		'\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', 
		'\x2', '\x2', '\x2', 'q', '\x13', '\x3', '\x2', '\x2', '\x2', 'r', 'p', 
		'\x3', '\x2', '\x2', '\x2', '\v', '\x17', '$', ',', '\x33', '@', 'M', 
		'Z', 'n', 'p',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace PIR8.ISA.Assembly.Gen
